--- volatility/plugins/addrspaces/intel.py	2012-07-08 14:57:38.000000000 +0200
+++ volatility/plugins/addrspaces/my_intel.py	2013-04-16 15:40:46.907644274 +0200
@@ -12,31 +12,33 @@
 # This program is distributed in the hope that it will be useful, but
 # WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
-# General Public License for more details. 
+# General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program; if not, write to the Free Software
-# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 #
 
 """ This is Jesse Kornblum's patch to clean up the standard AS's.
 """
-import struct
+import struct, sys
 import volatility.plugins.addrspaces.standard as standard
 import volatility.addrspace as addrspace
 import volatility.obj as obj
 import volatility.debug as debug #pylint: disable-msg=W0611
+#import volatility.conf as conf
+
 
 # WritablePagedMemory must be BEFORE base address, since it adds the concrete method get_available_addresses
 # If it's second, BaseAddressSpace's abstract version will take priority
 class JKIA32PagedMemory(standard.AbstractWritablePagedMemory, addrspace.BaseAddressSpace):
     """ Standard x86 32 bit non PAE address space.
-    
-    Provides an address space for IA32 paged memory, aka the x86 
+
+    Provides an address space for IA32 paged memory, aka the x86
     architecture, without Physical Address Extensions (PAE). Allows
     callers to map virtual address to offsets in physical memory.
 
-    Create a new IA32 address space without PAE to sit on top of 
+    Create a new IA32 address space without PAE to sit on top of
     the base address space and a Directory Table Base (CR3 value)
     of 'dtb'.
 
@@ -44,11 +46,11 @@
     for extra performance. The cache option requires an additional 4KB of
     space.
 
-    Comments in this class mostly come from the Intel(R) 64 and IA-32 
-    Architectures Software Developer's Manual Volume 3A: System Programming 
+    Comments in this class mostly come from the Intel(R) 64 and IA-32
+    Architectures Software Developer's Manual Volume 3A: System Programming
     Guide, Part 1, revision 031, pages 4-8 to 4-15. This book is available
     for free at http://www.intel.com/products/processor/manuals/index.htm.
-    Similar information is also available from Advanced Micro Devices (AMD) 
+    Similar information is also available from Advanced Micro Devices (AMD)
     at http://support.amd.com/us/Processor_TechDocs/24593.pdf.
     """
     order = 70
@@ -60,7 +62,6 @@
     def __init__(self, base, config, dtb = 0, *args, **kwargs):
         ## We must be stacked on someone else:
         self.as_assert(base, "No base Address Space")
-
         ## We allow users to disable us in favour of the old legacy
         ## modules.
         self.as_assert(not config.USE_OLD_AS, "Module disabled")
@@ -89,6 +90,7 @@
         #self.pagefile = config.PAGEFILE
         self.name = 'Kernel AS'
 
+
     def is_valid_profile(self, profile):
         return profile.metadata.get('memory_model', '32bit') == '32bit'
 
@@ -108,7 +110,7 @@
 
     def _cache_values(self):
         '''
-        We cache the Page Directory Entries to avoid having to 
+        We cache the Page Directory Entries to avoid having to
         look them up later. There is a 0x1000 byte memory page
         holding the four byte PDE. 0x1000 / 4 = 0x400 entries
         '''
@@ -137,16 +139,17 @@
                 self.base.dtb = dtb
                 return dtb
 
+
     def entry_present(self, entry):
         '''
-        Returns whether or not the 'P' (Present) flag is on 
+        Returns whether or not the 'P' (Present) flag is on
         in the given entry
         '''
         if entry:
             if (entry & 1):
                 return True
 
-            # The page is in transition and not a prototype. 
+            # The page is in transition and not a prototype.
             # Thus, we will treat it as present.
             if (entry & (1 << 11)) and not (entry & (1 << 10)):
                 return True
@@ -162,13 +165,96 @@
             return (entry & (1 << 7)) == (1 << 7)
         return False
 
+
+    '''
+    POC to prove the EPT feasibility - Works only with 32bit Guests.
+    TODO: really generic functions
+    '''
+    def get_ept_pml4(self, eptp):
+        mask = 0xfffff000
+        return (eptp & mask)
+
+
+    '''
+    PML4E: 63:52 = 0 | 51:12 = PML4 | 11:3 = 47:39 GPA | 2:0 = 0
+    '''
+    def get_ept_pml4e(self, pml4, gpa):
+        pml4e_raw = self.read_long_phys(pml4)
+        # check if bits 2:0 of an EPT paging-structure entry are all 0, thus the entry is NOT PRESENT.
+        if (pml4e_raw & 0x007) == 0:
+            return None
+        pml4e = pml4e_raw & 0xfffff000
+        return pml4e
+
+
+    def get_ept_pdpte(self, pml4e, gpa):
+        gpa_offset = gpa >> 30 #(38:30 from GPA)
+        value = pml4e | (gpa_offset << 3)
+        val = value & 0xFFFFFFF8
+        pdpte_raw = self.read_long_phys(val)
+        # check if bits 2:0 of an EPT paging-structure entry are all 0, thus the entry is NOT PRESENT.
+        if (pdpte_raw & 0x007) == 0:
+            return None
+        # bit 7 size check
+        if self.page_size_flag(pdpte_raw):
+            debug.info("EPT - 1GB page _ FAIL")
+        pdpte = pdpte_raw & 0xfffff000
+        return pdpte
+
+
+    def get_ept_pde(self, pdpte, gpa):
+        gpa_offset = (gpa >> 21) & 0x1FF
+        value = pdpte | (gpa_offset << 3)
+        val = value & 0xFFFFFFF8
+        pde_raw = self.read_long_phys(val)
+        # check if bits 2:0 of an EPT paging-structure entry are all 0, thus the entry is NOT PRESENT.
+        if (pde_raw & 0x007) == 0:
+            return None, 0
+        if self.page_size_flag(pde_raw):
+            return pde_raw, 1
+        pde = pde_raw & 0xfffff000
+        return pde, 0
+
+
+    def get_ept_pte(self, pde, gpa):
+        gpa_offset = (gpa >> 12) & 0x1FF
+        value = pde | (gpa_offset << 3)
+        val = value & 0xFFFFFFF8
+        pte_raw = self.read_long_phys(val)
+        # check if bits 2:0 of an EPT paging-structure entry are all 0, thus the entry is NOT PRESENT.
+        if (pte_raw & 0x007) == 0:
+            return None
+        pte = pte_raw & 0xfffff000
+        return pte
+
+
+    def get_ept_phy(self, pte, gpa):
+        gpa_offset = gpa & 0xfff
+        value = pte | gpa_offset
+        phy_value = self.read_long_phys(value)
+        return phy_value
+
+
+    def get_ept_phy_addr(self, pte, gpa):
+        gpa_offset = gpa & 0xfff
+        value = pte | gpa_offset
+        return value
+
+
+    def get_ept_2mb_phy(self, pde, gpa):
+        gpa_offset = gpa & 0x1FFFFF
+        value = (pde & 0xFFE00000) | gpa_offset
+        return value
+
+
     def pde_index(self, vaddr):
-        ''' 
+        '''
         Returns the Page Directory Entry Index number from the given
         virtual address. The index number is in bits 31:22.
         '''
         return vaddr >> 22
 
+
     def get_pde(self, vaddr):
         '''
         Return the Page Directory Entry for the given virtual address.
@@ -178,11 +264,29 @@
         Bits 11:2 are bits 31:22 of the linear address
         Bits 1:0 are 0.
         '''
-        if self.cache:
-            return self.pde_cache[self.pde_index(vaddr)]
-
         pde_addr = (self.dtb & 0xfffff000) | ((vaddr & 0xffc00000) >> 20)
-        return self.read_long_phys(pde_addr)
+        # Within a Guest Operating System using EPT this address is a GPA address and
+        # it has to pass through EPT. So let's do it...
+        if self._config.EPT != None:
+            gpa = pde_addr
+            pml4 = self.get_ept_pml4(self._config.EPT)
+            pml4e = self.get_ept_pml4e(pml4, gpa)
+            if pml4e == None: return None
+            pdpte = self.get_ept_pdpte(pml4e, gpa)
+            if pdpte == None: return None
+            pde, size = self.get_ept_pde(pdpte, gpa)
+            if (pde, size) == (None, 0): return None
+            if size == 0:
+                phy = self.get_ept_pte(pde, gpa)
+                if phy == None: return None
+                phy_value = self.get_ept_phy(phy, gpa)
+            else:
+                phy_value = self.get_ept_2mb_phy(pde, gpa)
+                if phy_value == None: return None
+            return phy_value
+        else:
+            return self.read_long_phys(pde_addr)
+
 
     def get_pte(self, vaddr, pde_value):
         '''
@@ -194,7 +298,26 @@
         Bits 1:0 are 0
         '''
         pte_addr = (pde_value & 0xfffff000) | ((vaddr & 0x3ff000) >> 10)
-        return self.read_long_phys(pte_addr)
+        if self._config.EPT != None:
+            gpa = pte_addr
+            pml4 = self.get_ept_pml4(self._config.EPT)
+            pml4e = self.get_ept_pml4e(pml4, gpa)
+            if pml4e == None: return None
+            pdpte = self.get_ept_pdpte(pml4e, gpa)
+            if pdpte == None: return None
+            pde, size = self.get_ept_pde(pdpte, gpa)
+            if (pde, size) == (None, 0): return None
+            if size == 0:
+                phy = self.get_ept_pte(pde, gpa)
+                if phy == None: return None
+                phy_value = self.get_ept_phy(phy, gpa)
+            else:
+                phy_value = self.get_ept_2mb_phy(pde, gpa)
+                if phy_value == None: return None
+            return phy_value
+        else:
+            return self.read_long_phys(pte_addr)
+
 
     def get_phys_addr(self, vaddr, pte_value):
         '''
@@ -204,14 +327,72 @@
         Bits 31:12 are from the PTE
         Bits 11:0 are from the original linear address
         '''
-        return (pte_value & 0xfffff000) | (vaddr & 0xfff)
+        #return (pte_value & 0xfffff000) | (vaddr & 0xfff)
+        phy_addr = (pte_value & 0xfffff000) | (vaddr & 0xfff)
+        if self._config.EPT != None:
+            gpa = phy_addr
+            pml4 = self.get_ept_pml4(self._config.EPT)
+            pml4e = self.get_ept_pml4e(pml4, gpa)
+            if pml4e == None: return None
+            pdpte = self.get_ept_pdpte(pml4e, gpa)
+            if pdpte == None: return None
+            pde, size = self.get_ept_pde(pdpte, gpa)
+            if (pde, size) == (None, 0): return None
+            if size == 0:
+                phy = self.get_ept_pte(pde, gpa)
+                if phy == None: return None
+                phy_value = self.get_ept_phy_addr(phy, gpa)
+            else:
+                phy_value = self.get_ept_2mb_phy(pde, gpa)
+                if phy_value == None: return None
+            return phy_value
+        else:
+            return phy_addr
+
+
+    def gpa2hpa_ept(self, gpa, eptp):
+        pml4 = self.get_ept_pml4(eptp)
+        pml4e = self.get_ept_pml4e(pml4, gpa)
+        if pml4e == None: return None
+        pdpte = self.get_ept_pdpte(pml4e, gpa)
+        if pdpte == None: return None
+        pde, size = self.get_ept_pde(pdpte, gpa)
+        if (pde, size) == (None, 0): return None
+        if size == 0:
+            phy = self.get_ept_pte(pde, gpa)
+            if phy == None: return None
+            phy_value = self.get_ept_phy_addr(phy, gpa)
+        else:
+            phy_value = self.get_ept_2mb_phy(pde, gpa)
+            if phy_value == None: return None
+        return phy_value
+
 
     def get_four_meg_paddr(self, vaddr, pde_value):
         '''
         Bits 31:22 are bits 31:22 of the PDE
         Bits 21:0 are from the original linear address
         '''
-        return  (pde_value & 0xffc00000) | (vaddr & 0x3fffff)
+        phy_addr = (pde_value & 0xffc00000) | (vaddr & 0x3fffff)
+        if self._config.EPT != None:
+            gpa = phy_addr
+            pml4 = self.get_ept_pml4(self._config.EPT)
+            pml4e = self.get_ept_pml4e(pml4, gpa)
+            if pml4e == None: return None
+            pdpte = self.get_ept_pdpte(pml4e, gpa)
+            if pdpte == None: return None
+            pde, size = self.get_ept_pde(pdpte, gpa)
+            if (pde, size) == (None, 0): return None
+            if size == 0:
+                phy = self.get_ept_pte(pde, gpa)
+                if phy == None: return None
+                phy_value = self.get_ept_phy_addr(phy, gpa)
+            else:
+                phy_value = self.get_ept_2mb(pde, gpa)
+                if phy_value == None: return None
+            return phy_value
+        else:
+            return phy_addr
 
 
     def vtop(self, vaddr):
@@ -220,21 +401,42 @@
         The function should return either None (no valid mapping)
         or the offset in physical memory where the address maps.
         '''
+        debug.debug("-------------------------------------------------")
+        debug.debug(">>> Gettin PDE...")
+        #print "EPTP %08x" % self._config.EPT
         pde_value = self.get_pde(vaddr)
+
+        if pde_value == None: return None
+
+        debug.debug(">>> PDE == %08x" % pde_value)
         if not self.entry_present(pde_value):
             # Add support for paged out PDE
             # (insert buffalo here!)
             return None
 
         if self.page_size_flag(pde_value):
-            return self.get_four_meg_paddr(vaddr, pde_value)
+            fmpaddr = self.get_four_meg_paddr(vaddr, pde_value)
+            if fmpaddr == None: return None
+            debug.debug(">>> PHY_VALUE [size_flag: ON] == %08x" % fmpaddr)
+            return fmpaddr
 
+        debug.debug(">>> Getting PTE...")
         pte_value = self.get_pte(vaddr, pde_value)
+
+        if pte_value == None: return None
+
+        debug.debug(">>> PTE == %08x" % pte_value)
+
         if not self.entry_present(pte_value):
             # Add support for paged out PTE
             return None
 
-        return self.get_phys_addr(vaddr, pte_value)
+        debug.debug(">>> Getting PHY_ADDR...")
+        ppp = self.get_phys_addr(vaddr, pte_value)
+        if ppp == None: return None
+        debug.debug(">>> HPA == %08x (GVA %08x)" % (ppp, vaddr))
+        return ppp
+
 
     def __read_chunk(self, vaddr, length):
         """
@@ -247,6 +449,7 @@
         guarenteed to be contigious. Calling functions are responsible
         for determining contiguious blocks.
         """
+        # ok vtop is called.
         paddr = self.vtop(vaddr)
         if paddr is None:
             return None
@@ -260,7 +463,7 @@
     def __read_bytes(self, vaddr, length, pad):
         """
         Read 'length' bytes from the virtual address 'vaddr'.
-        The 'pad' parameter controls whether unavailable bytes 
+        The 'pad' parameter controls whether unavailable bytes
         are padded with zeros.
         """
         vaddr, length = int(vaddr), int(length)
@@ -286,14 +489,14 @@
 
     def read(self, vaddr, length):
         '''
-        Read and return 'length' bytes from the virtual address 'vaddr'. 
+        Read and return 'length' bytes from the virtual address 'vaddr'.
         If any part of that block is unavailable, return None.
         '''
         return self.__read_bytes(vaddr, length, pad = False)
 
     def zread(self, vaddr, length):
         '''
-        Read and return 'length' bytes from the virtual address 'vaddr'. 
+        Read and return 'length' bytes from the virtual address 'vaddr'.
         If any part of that block is unavailable, pad it with zeros.
         '''
         return self.__read_bytes(vaddr, length, pad = True)
@@ -312,10 +515,11 @@
         (longval,) = struct.unpack('<I', string)
         return longval
 
+
     def get_available_pages(self):
         '''
         Return a list of lists of available memory pages.
-        Each entry in the list is the starting virtual address 
+        Each entry in the list is the starting virtual address
         and the size of the memory page.
         '''
         # Pages that hold PDEs and PTEs are 0x1000 bytes each.
@@ -338,18 +542,19 @@
                         yield (vaddr, 0x1000)
 
 
+
 class JKIA32PagedMemoryPae(JKIA32PagedMemory):
     """ Standard x86 32 bit PAE address space.
-    
-    Provides an address space for IA32 paged memory, aka the x86 
+
+    Provides an address space for IA32 paged memory, aka the x86
     architecture, with Physical Address Extensions (PAE) enabled. Allows
     callers to map virtual address to offsets in physical memory.
 
-    Comments in this class mostly come from the Intel(R) 64 and IA-32 
-    Architectures Software Developer's Manual Volume 3A: System Programming 
+    Comments in this class mostly come from the Intel(R) 64 and IA-32
+    Architectures Software Developer's Manual Volume 3A: System Programming
     Guide, Part 1, revision 031, pages 4-15 to 4-23. This book is available
     for free at http://www.intel.com/products/processor/manuals/index.htm.
-    Similar information is also available from Advanced Micro Devices (AMD) 
+    Similar information is also available from Advanced Micro Devices (AMD)
     at http://support.amd.com/us/Processor_TechDocs/24593.pdf.
     """
     order = 80
@@ -464,10 +669,10 @@
         Returns an unsigned 64-bit integer from the address addr in
         physical memory. If unable to read from that location, returns None.
         '''
-        try:
-            string = self.base.read(addr, 8)
-        except IOError:
-            string = None
+        #try:
+        string = self.base.read(addr, 8)
+        #except IOError:
+         #   string = None
         if not string:
             return obj.NoneObject("Unable to read_long_long_phys at " + hex(addr))
         (longlongval,) = struct.unpack('<Q', string)
@@ -476,7 +681,7 @@
     def get_available_pages(self):
         '''
         Return a list of lists of available memory pages.
-        Each entry in the list is the starting virtual address 
+        Each entry in the list is the starting virtual address
         and the size of the memory page.
         '''
 
